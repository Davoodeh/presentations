#+TITLE: Vim for beginners
#+AUTHOR: Niklas Carlsson
#+DATE: 12 June 2018
#+EMAIL: niklas.carlsson@zenuity.com

#+OPTIONS: num:nil reveal_control:nil toc:nil
#+OPTIONS: reveal_title_slide:auto
#+OPTIONS: title:t author:nil date:t email:nil timestamp:nil
#+OPTIONS: html5-fancy:t
#+REVEAL_THEME: solarized
#+REVEAL_TRANS: slide

* Vim for beginners :noexport:
  #+ATTR_HTML: :style text-align:right
  12 June 2018

  #+BEGIN_NOTES
  custom title slide
  #+END_NOTES

* General conceptions of Vim
** User friendly?
[[./images/vim_user.png]]

** Difficult?
[[./images/vim_complexity.jpg]]

* +Vim history+
** Optimized for keyboard usage
#+ATTR_HTML: :height 200%, :width 200%
[[./images/vim_keyboard.jpg]]

#+BEGIN_NOTES
#+END_NOTES

** Remap ctrl/escape
[[./images/xcape.png]]

#+BEGIN_NOTES
Remapping escape and control can be a great way to improve usage of Vim
#+END_NOTES

* Modeless vs Modal editing

#+BEGIN_NOTES
A modeless editor
- Use modifier keys rather than modes
- The default action is inserting
#+END_NOTES

#+BEGIN_NOTES
A modal editor
- The default action is editing existing text
#+END_NOTES

** Modal editing in Vim

#+ATTR_HTML: :frame void :rules none
| Modes   | Usage              |
|---------+--------------------|
| Normal  | navigate/edit text |
| Insert  | insert text        |
| Visual  | highlight text     |
| Command | execute commands   |

** Normal mode commands

[[./images/vim_cheat_sheet.gif]]

* Movement
** Horizontal

#+ATTR_HTML: :frame void :rules none
| Command | Action                                 |
|---------+----------------------------------------|
| h       | move one char to the left              |
| l       | move one char to the right             |
| w       | move to the next word                  |
| b       | move to the beginning of a word        |
| e       | move to the end of a word              |
| ^ / $   | move to the beginning/end of the line  |
| f{char} | find first instance of {char}          |
| t{char} | move till the first instance of {char} |

#+BEGIN_NOTES
Mnemonics plays a big role in Vim
#+END_NOTES

** Vertical

#+ATTR_HTML: :frame void :rules none
| Command     | Action                                        |
|-------------+-----------------------------------------------|
| j           | move one char down                            |
| k           | move one char up                              |
| {n}G        | move to line {n}                              |
| gg / G      | move to the beginning/end of the file         |
| { / }       | move to the beginning/end paragraphs          |
| * / #       | forward/backward search for word under cursor |
| /{s} / ?{s} | forward/backward search for string {s}        |

#+BEGIN_NOTES
- In Gerrit all the commands works that have been described except ~gg~ and ~?~
#+END_NOTES

** Movements are countable

#+BEGIN_QUOTE
Number + Movement
#+END_QUOTE

#+BEGIN_NOTES
- Movements can be counted
#+END_NOTES

** Vim movements are supported in Gerrit
[[./images/gerrit.png]]

** Vim in your browser
[[./images/cvim.png]]

* Inserting text

#+ATTR_HTML: :frame void :rules none
#+ATTR_REVEAL: :frag (roll-in)
| Command | Action                                       |
| i / a   | insert text before/after cursor              |
| I / A   | insert text at the beginning/end of the line |
| o / O   | insert text on the line below/above          |

* Undo / Redo

#+ATTR_HTML: :frame void :rules none
#+ATTR_REVEAL: :frag (roll-in)
| Command | Action |
| u       | undo   |
| ctrl-r  | redo   |

#+BEGIN_NOTES
- undo / redo are dependent on your atomic edits in insert mode
#+END_NOTES

* The dot command

#+ATTR_REVEAL: :frag (roll-in)
Repeat your last change

* Modify text

** Operators
#+ATTR_HTML: :frame void :rules none
#+ATTR_REVEAL: :frag (roll-in)
| Command | Action         |
|---------+----------------|
| d       | delete         |
| c       | change         |
| y       | yank           |


#+REVEAL: split
#+ATTR_HTML: :frame void :rules none
| Command | Action                |
|---------+-----------------------|
| D       | delete to end of line |
| C       | change to end of line |
| Y       | yank to end of line   |
| dd      | delete line           |
| cc      | change line           |
| yy      | yank line             |

#+BEGIN_NOTES
Disclaimer Y does not actually behave like this, but it should!
#+END_NOTES

** Commands are composable

#+ATTR_HTML: :height 200%, :width 200%
[[./images/composable.jpg]]

** Vim as a language
#+ATTR_REVEAL: :frag (roll-in)
#+BEGIN_QUOTE
Verb + Noun
#+END_QUOTE


#+ATTR_REVEAL: :frag (roll-in)
#+BEGIN_QUOTE
Operator + Movement
#+END_QUOTE

** Operator + Movement

#+ATTR_HTML: :frame void :rules none
| Command     | Action            |
| d{movement} | delete {movement} |
| c{movement} | change {movement} |
| y{movement} | yank {movement}   |

** Examples

#+ATTR_HTML: :frame void :rules none
| Command   | Action |
| cw        | ?      |
| dG        | ?      |
| dtx       | ?      |
| y}        | ?      |
| c/niklas  | ?      |

** Limitations
#+ATTR_REVEAL: :frag (roll-in)

- movement + operator + movement is not repeatable

* Operate on objects
** Text objects
There are two different types of text objects
- i, as in inside
- a, as in around

#+REVEAL: split
#+ATTR_HTML: :frame void :rules none
| Text object | Meaning                    |
|-------------+----------------------------|
| i / aw      | inside/around word         |
| i / a'      | inside/around single quote |
| i / a)      | inside/around parentheses  |
| i / ap      | inside/around paragraph    |
| i / as      | inside/around sentence     |

#+BEGIN_NOTES
Text objects are extendible, there are more that are available through plugins
Example: Commentary, indent(useful for python)
#+END_NOTES

** The general Vim command
#+BEGIN_QUOTE
(Number) + Operator + {Movement / Text Object}
#+END_QUOTE

* Customize core Vim
** Configuration file

#+BEGIN_SRC shell
~/.vimrc #vim
~/.config/nvim/init.vim #neovim
#+END_SRC

** Changing built in settings

#+CAPTION: init.vim
#+BEGIN_SRC vimrc
syntax enable " Enable syntax highlighting
set number " Show line number
set undofile " Enables persistent undo
set noswapfile " Disables swapfile
set spelllang=en_us " Sets spelling language to english
set hidden " Enable hidden buffers, buffers must not be saved
set splitbelow splitright " Set Split behavior
set mouse=a "Enable mouse interaction
set clipboard+=unnamedplus " Enable clipboard paste from other sources
set equalalways " Keep windows equal
set foldlevelstart=99 " start unfolded
set tabstop=4 shiftwidth=4 expandtab
set ignorecase smartcase " smart case enabled
#+END_SRC

#+ATTR_REVEAL: :frag (roll-in)
#+BEGIN_SRC vimrc
" Harmonize Y behavior with (C, D)
map Y y$
#+END_SRC

* Vim as your editor
** Improvements of vanilla Vim

- Navigation between buffers
- Opening new files
- Git integration
- More text objects
- Project wide search

* Extend Vim
** Vim-plug

#+CAPTION: init.vim
#+BEGIN_SRC vimrc
" Setup plugins {{{2
call plug#begin(expand('~/.config/nvim/plugged'))

" Define plugins
Plug 'tpope/vim-fugitive' " Integrate git
Plug 'skywind3000/asyncrun.vim' " Dispatch commands
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim' " Fuzzy finder
Plug 'airblade/vim-gitgutter' " Git changes are seen in the gutter
Plug 'tpope/vim-commentary' " Comments
Plug 'tpope/vim-surround' " Change surrounding chars
Plug 'tpope/vim-unimpaired' " Improve navigation
Plug 'qpkorr/vim-bufkill' " Improve buffer handling
Plug 'arcticicestudio/nord-vim' " Colorscheme dark
Plug 'iCyMind/NeoSolarized' " Colorscheme light
call plug#end()
#+END_SRC

#+BEGIN_NOTES
There are different plugin managers for Vim
- Above is code for installing plugins using Vim-Plug
#+END_NOTES

** Custom mappings

#+BEGIN_SRC vimrc
" Define leader key
let mapleader=","
" Open a terminal buffer
nnoremap <silent> <leader>ot :term<CR>
" Open git status window
nnoremap <silent> <leader>gs :Gstatus<CR><C-w>K
" Open a new tab with git blame of the current buffer
nnoremap <silent> <leader>gb :tab sp <bar> :Gblame<CR>
" Open a new window in a vertical split
nnoremap <silent> <leader>wv <C-w>v
" Find file
nnoremap <silent> <leader>ff :Files<CR>
#+END_SRC

#+BEGIN_NOTES
Leader key will allow you to easily specifiy your own sequence of commands.
This makes it easy to build Mnemonic sequences for useful things:
Example:
| <leader>gs | git status      |
| <leader>gb | git blame       |
| <leader>wv | window vertical |
| <leader>wc | window close    |
| <leader>ff | file, find      |
#+END_NOTES

* Demo
#+BEGIN_QUOTE
Let's go through some common usecases
#+END_QUOTE

** fzf integration

#+BEGIN_NOTES
Fzf is a great commandline tool and it integrates nicely with Vim
#+END_NOTES

** Minimize writing by utilizing completion

#+BEGIN_NOTES
It is possible to extend Vim for completion but it can be good practice to start
with the built in ones and find out what the limitations are.

| Command | Action                              |
|---------+-------------------------------------|
| C-p/n   | Cycle previous/next word completion |

#+END_NOTES

** Buffer wide substitution

#+BEGIN_NOTES
:%s/old/new/g
#+END_NOTES

** Project wide substitution

#+BEGIN_NOTES
- Grep with rg
- Filter the results with fzf
- Apply command with quickfixlist cdo
#+END_NOTES

** Run build commands and traverse errors

#+BEGIN_NOTES
- :AsyncRun command
#+END_NOTES

** Extended text objects

#+BEGIN_NOTES
indent
argument
exchange
comment
#+END_NOTES

** Built in terminal emulator
** Persistent undo
** Jump-list
** Interact with Git

#+BEGIN_NOTES
- Git status
- Git diff
- Git blame
- Git log
#+END_NOTES

* Vim resources
** Books

#+ATTR_HTML: :width 50% :height 50%
[[./images/practical_vim.jpeg]]

#+REVEAL: split
#+ATTR_HTML: :width 50% :height 50%
[[./images/modern_vim.jpeg]]

** Podcast

[[./images/vim_casts.png]]

** Screencast

[[./images/vim_screencast.png]]

** Presentations

[[./images/thoughtbot.png]]

* Try it out yourself

~Install Neovim~
#+BEGIN_SRC
sudo apt-add-repository ppa:neovim-ppa/stable
sudo apt-get update
sudo apt-get install neovim
#+END_SRC

~Download configuration~
#+BEGIN_SRC shell
git clone https://github.com/niklascarlsson/vim_setup.git ~/vim_setup
mkdir ~/.config/nvim
cp ~/vim_setup/minimal.vim ~/.config/nvim/init.vim
rm -rf ~/vim_setup
#+END_SRC

* Prepare presentation [3/3] :noexport:
- [X] Select strategy for what code to use for examples
- [X] Finish a first outline of the presentation
- [X] Update the latest corrected Neovim setup

#+TITLE: Elisp for beginners
#+AUTHOR: Niklas Carlsson
#+DATE: 14 October 2018

#+OPTIONS: num:nil reveal_control:nil toc:nil
#+OPTIONS: reveal_title_slide:auto
#+OPTIONS: title:t author:nil date:t email:nil timestamp:nil
#+REVEAL_THEME: moon
#+REVEAL_TRANS: slide

* Background

#+BEGIN_NOTES
Emacs lisp is both one of the most exciting and daunting things about Emacs for
me. Before starting to explore Emacs I had never encountered or engaged in lisp
nor in functional programming. So the paradigm was something very non familiar
for me.

This is a an introduction to Emacs lisp, for beginners by an enthusiastic
beginner. So for anyone that haven't dealt that much with Emacs lisp this might
be a good start. I thought I would share some of the knowledge that I have
acquired so far.
#+END_NOTES

** Build from Vim
So background, I have been using Emacs since around march this year. I started
to experiment some with Spacemacs, since I come from a Vim background. But after
two weeks or so I moved on to Doom Emacs which I have been using since then.

#+BEGIN_NOTES
I was a happy Vim user
#+END_NOTES

#+BEGIN_NOTES
- Started by getting inspired by 3 different people in one month
- Realized I had not watched one video, the strangelove one, and avoiding behaviour
- Picture of the youtube video in question
#+END_NOTES

** Spacemacs
[[./images/spacemacs.png]]

** Doom Emacs

[[./images/doom.png]]

#+BEGIN_NOTES
In the beginning I used Emacs only for taking notes in org-mode and later to do
my git work with magit. I found that this was a good way to ease myself into
using Emacs. I could gradually start use it more and more and now this is my
daily tool.
#+END_NOTES

** Org-mode

[[./images/org-mode.png]]

** Magit

[[./images/magit.png]]

** Eshell

#+BEGIN_NOTES
So even though I have acquired some understanding about tweaking and customizing
Emacs it has mainly been built upon the internal code in Doom and snippets or
blog posts that I have found on the internet.

But I started to long for learning some elisp so that I could better understand
what was actually happening and to build some useful functionality myself. I am
quite fascinated with workflows. I like contemplating about my behavioural
patterns, do I want to stop or improve some, what I can do differently etc. So I
think the top-down approach that I chose to learn Emacs was right for me.

So this summer I switched from only using zsh to also start using eshell. This
was a conscious decision where one of the driving forces was that since eshell is
elisp it also has access to all the functions in Emacs and it also means I can
write some functions of my own to perform shell tasks.
#+END_NOTES

[[./images/eshell.png]]

* Emacs Lisp

** Resources
*** Learn Elisp in 15 minutes

https://learnxinyminutes.com/docs/elisp/

~In short:~
#+BEGIN_NOTES
- symbolic expressions are enclosed into parantheses
- a symbolic expression contains atoms or other symbolic expressions
- progn let's you combine multiple sexps
- let let's you combine multiple sexps
- ', quote, the list to stop it from being evaluated
- car and cdr doesn't have any sideeffects, but push have, it actually modifies
  the list
- mapcar runs a function on all elements in a list
- learn how to use search in a loop and make it fail silently with extra input arguments
#+END_NOTES

#+BEGIN_SRC elisp
;; this is the set way needs to quotes
(set 'elisp-demo-attendants '("niklas" "david"))
;; this is setq way with one quote
(setq elisp-demo-attendants '("niklas" "david"))
(car elisp-demo-attendants)
(cdr elisp-demo-attendants)
;; the second quote is not needed in this example
(setq elisp-demo-attendants (+ 1 2 3))

#+END_SRC

#+BEGIN_SRC elisp
(defun hello (name)
  (insert "Hello " name))

;; multiple sexps
(progn
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (hello "there"))

;; improved, let, let's you skip the progn
(let ((local-name "you"))
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (hello local-name)
  (other-window 1))

;; rewrite with lambda
(let ((local-name "you"))
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  ( ;; create the anonymous function
   (lambda (name) (insert (format "Hello %s!" name)))
   ;; call it with the local-name as input
   local-name)
  (other-window 1))

;; interact with the shell using shell-command
(let ((local-name "you"))
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (shell-command "ls" t)
  (other-window 1))

#+END_SRC

#+BEGIN_SRC elisp
;; hello function using format to have a nice string
(defun hello (name)
  (insert (format "Hello %s! \n" name)))
;; create a list of names
(setq list-of-names '("Sarah" "Chloe" "Mathilde"))
(push "Stephanie" list-of-names)
;; greet the names
(defun greeting ()
    (switch-to-buffer-other-window "*test*")
    (erase-buffer)
    (mapcar 'hello list-of-names)
    (other-window 1))
;; call the greeting function
(greeting)

(defun replace-hello-by-bonjour ()
    (switch-to-buffer-other-window "*test*")
    (goto-char (point-min))
    (while (search-forward "Hello" nil 't)
      (replace-match "Bonjour"))
    (other-window 1))

(replace-hello-by-bonjour)
;; You should see all occurrences of "Hello" in the *test* buffer
;; replaced by "Bonjour".

;; You should also get an error: "Search failed: Hello".
;; To avoid this error, you need to tell `search-forward' whether it
;; should stop searching at some point in the buffer, and whether it
;; should silently fail when nothing is found:

;; (search-forward "Hello" nil 't) does the trick:

;; The `nil' argument says: the search is not bound to a position.
;; The `'t' argument says: silently fail when nothing is found.

;; Let's boldify the names:

(defun boldify-names ()
    (switch-to-buffer-other-window "*test*")
    (goto-char (point-min))
    (while (re-search-forward "Bonjour \\(.+\\)!" nil 't)
      (add-text-properties (match-beginning 1)
                           (match-end 1)
                           (list 'face 'bold)))
    (other-window 1))

(boldify-names)
#+END_SRC
*** An introduction to Emacs Lisp

Resources:
[[https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html][notes from the video]]
[[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html][official reference]]

~In short:~
- atoms are the smallest objects and they evaluate to themselves
- car is first, cdr is rest
- let* makes it possible to have variables that are dependent on others
- null function checks for nil
- when is an if function without an else
- cond is like a switch/case construction

Each line just evaluates to itself
#+BEGIN_SRC elisp
42
3.0
"foo!"
#+END_SRC

Some math calculations
#+BEGIN_SRC elisp
(+ (* 2 3 )
   (/ 8 4))
#+END_SRC

#+RESULTS:
: 8

#+BEGIN_SRC elisp
(1 2 3) ;; gives an error
(quote (1 2 3)) ;; now the list is not evaluated
'(1 2 3) ;; this is a simpler way to write it
#+END_SRC

#+BEGIN_SRC elisp
'() ;;an empty list evaluates to nil
(null nil) ;; null tests if something is nil
#+END_SRC

#+BEGIN_SRC elisp
(cons 1 '(2 3)) ;; constructs a list out of
(append '(1 2) '(3 4)) ;; appends two lists
;; => (1 2 3 4)
(cons '(1 2) '(3 4)) ;; notice the difference between cons and append
;; => ((1 2) 3 4)
#+END_SRC

#+BEGIN_EXAMPLE
The answer is that setq actually isn’t just a function. setq is an example of a
macro. Macros are a bit like functions, but they also make it possible to
manipulate their arguments before they get executed—in this case, the setq macro
implicitly wraps a quote around the first argument. Macros are a big topic
that’s way outside the scope of this tutorial, but they’re just awesome, so I’d
highly recommend checking them out when you get a chance. They’re one of the
things that make Lisp really fun to work with.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Some functions—= or null, for example—just return t or nil. Lisp programmers
refer to such functions as predicates. Predicates are usually (though not
always) distinguished by being suffixed by “-p”.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
cond is a generalization of if that can match an arbitrary number of cases. It
takes a collection of lists, each of which starts with a Boolean expression. It
runs through each such expression searching for one that matches, then evaluates
the remaining elements in that list and returns the result.
#+END_EXAMPLE

#+BEGIN_SRC elisp
(defun favorite-number (number)
  (cond
   ((= number 1) "one")
   ((= number 2) "two")
   ((= number 3) "three")
   ;; t is always true making this test like the default in a switch case
   (t "eight")))

(favorite-number 3)
;; "three"
(favorite-number 5 )
;; "eight"
#+END_SRC

Recursion example:
#+BEGIN_SRC elisp
(defun factorial (n)
  (if (< n 1)
      1
    (* n (factorial (- n 1)))))

(factorial 5)
;; => 120
#+END_SRC

Lambda example:
#+BEGIN_SRC elisp
;; anonymous cube function
((lambda (x) (* x x x)) 5)
;; => 125
#+END_SRC

#+BEGIN_EXAMPLE
As we’ve seen, we can pretty much treat functions as just another kind of
variable. There’s no reason that we can’t pass them in as arguments to other
functions. Functions that take other functions as arguments are commonly called
higher-order functions, but otherwise there’s nothing special about them. We can
easily write our own.
#+END_EXAMPLE

#+BEGIN_SRC elisp
;; if n is euql to zero return zero otherwise execute incomming function
(defun transform-unless-zero (fn n)
  (if (= n 0)
      0
    (funcall fn n)))

(transform-unless-zero (lambda (n) (+ 1 n)) 0)
;; => 0
(transform-unless-zero (lambda (n) (+ 1 n)) 8)
;; => 9
#+END_SRC

#+BEGIN_EXAMPLE
funcall takes a function and (optionally) some arguments, and calls the function
on those arguments. The function doesn’t even have to be anonymous.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
In fact, they’re so useful that they show up all over the place in Lisp. One of
the most common examples is mapcar. It takes a function and a list, applies the
function to each element in the list, and returns a new list of results.
#+END_EXAMPLE

#+BEGIN_SRC elisp
(mapcar (lambda (n) (interactive) (* (+ 1 n) 2)) '(1 2 3 5 6))
;; => (4 6 8 12 14)
#+END_SRC


Note: Mapcar is nondestructive in terms of the original list

#+BEGIN_SRC elisp
(mapcar 'upcase '("niklas" "katarina" "kiti"))
#+END_SRC

#+RESULTS:
| NIKLAS | KATARINA | KITI |

#+BEGIN_EXAMPLE
remove-if-not is another handy higher-order function. It takes a predicate and a
list. It returns a new list that only contains those items that satisfy the
predicate.
#+END_EXAMPLE

#+BEGIN_SRC elisp
(remove-if-not 'stringp '(1 2 "niklas"))
#+END_SRC

#+RESULTS:
| niklas |

~Example: Quicksort~
#+BEGIN_EXAMPLE
- Pick some element in the list (we’ll just always pick the first element). Call it the pivot.
- Create two other lists, containing all the items that are smaller than the pivot and all the items that are larger.
- Apply quicksort to both of the smaller and larger lists, recursing down until we hit the empty list.
- Join the smaller list, the pivot, and the larger list into one new list and return it. Done.
#+END_EXAMPLE

#+BEGIN_SRC elisp
(defun qs (input)
  (if (null input)
      ;; reached the end of the list return an empty list
      '()
    (let* ((pivot (car input))
           (rest (cdr input))
           ;; remove the numbers that are larger than pivot
           (smaller (remove-if (lambda (value) (> value pivot)) rest))
           ;; remove the numbers that are smaller than pivot
           (larger (remove-if (lambda (value) (<= value pivot)) rest)))
      ;; Sort smaller and larger until one of them becomes null, then return the
      (append (qs smaller) (list pivot) (qs larger)))))

(qs '(4 7 2 3 8 5 9))
#+END_SRC
